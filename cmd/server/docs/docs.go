// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/books": {
            "get": {
                "description": "Retrieve all books from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Get all books",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a new book to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Create a new book",
                "parameters": [
                    {
                        "description": "Book data",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.BookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.MissingAuthorization"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.TitleAlreadytaken"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/{id}": {
            "get": {
                "description": "Retrieve a single book by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Get book by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.BookNotFoundResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update book information by its ID, u have to login first to access your access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Update book by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated book data",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.BookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.SuccessfullUpdate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.InvalidId"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.BookNotFoundResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a book from the database using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Delete book by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.DeleteSuccesfullu"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.InvalidId"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_dto.BookNotFoundResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_qhmd_gitforgits_internal_domain_book.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string",
                    "example": "John Smith"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer",
                    "example": 205
                },
                "title": {
                    "type": "string",
                    "example": "How To Become Backend Engineer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.BookNotFoundResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "book not found"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.BookRequest": {
            "type": "object",
            "required": [
                "author",
                "page",
                "title"
            ],
            "properties": {
                "author": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 4,
                    "example": "John Smith"
                },
                "page": {
                    "type": "integer",
                    "example": 205
                },
                "title": {
                    "type": "string",
                    "example": "How To Become Backend Engineer"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.DeleteSuccesfullu": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "delete successfully"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something went wrong"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.InvalidId": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid id"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.MissingAuthorization": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "missing authorization header"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.SuccessfullUpdate": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/github_com_qhmd_gitforgits_internal_domain_book.Book"
                },
                "message": {
                    "type": "string",
                    "example": "update successfully"
                }
            }
        },
        "github_com_qhmd_gitforgits_internal_dto.TitleAlreadytaken": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email already taken"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "GitForGits API",
	Description:      "API documentation for project GitForGits",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
